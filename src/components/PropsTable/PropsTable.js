import React from "react"
import PropTypes from "prop-types"
import {
  Box,
  Table,
  TableBody,
  TableHeader,
  TableRow,
  TableCell,
  Text,
} from "grommet"
/**
 * Table for React props generated by react-docgen
 *
 * @see https://github.com/episodeyang/react-component-props-table/
 */
const PropsTable = props => {
  const { className = "", propMetaData = [], ..._props } = props

  /**
   * Recursively runs through props to
   * return the type's value or name (if no value)
   *
   * e.g. PropTypes.OneOf[] is array of enum values
   * vs PropTypes.Boolean is name
   */
  const listProps = cellProps => {
    // Can be object, array of objects, and
    // array of objects with another array nested

    // Check if it's array or object
    // If object, check if has value key
    // If so, return value
    // If array, loop through and run function again
    if ("value" in cellProps) {
      if (Array.isArray(cellProps.value)) {
        return listProps(cellProps.value)
      }
      return cellProps.value
    }
    if (Array.isArray(cellProps)) {
      return cellProps.map(prop => {
        return listProps(prop)
      })
    }
    if ("name" in cellProps) {
      return cellProps.name
    }
    return cellProps
  }
  const propsList = propsValue =>
    listProps(propsValue).map(prop => {
      if (typeof prop !== "string")
        return prop.map(childProp => <Text>{childProp}</Text>)
      return <Text>{prop}</Text>
    })
  const createPropNames = propNames => {
    switch (propNames) {
      case "bool":
        return (
          <Box>
            <Text>true</Text>
            <Text>false</Text>
          </Box>
        )
      case "func":
        return <Text>function</Text>
      default:
        return <Text>{propNames}</Text>
    }
  }
  return (
    <Table className={`component-props-table ${className}`} {..._props}>
      <TableHeader>
        <TableRow>
          <TableCell>Prop Name</TableCell>
          <TableCell>Values</TableCell>
          <TableCell>Required</TableCell>
          <TableCell>Default Value</TableCell>
          <TableCell>Description</TableCell>
        </TableRow>
      </TableHeader>
      <TableBody>
        {Object.keys(propMetaData).map(key => {
          const prop = propMetaData[key]
          return (
            <TableRow key={key}>
              <TableCell style={{ color: "rgb(17, 147, 154)" }}>
                {prop.name}
              </TableCell>
              <TableCell>
                <Box>
                  {prop.type && prop.type.value !== null
                    ? propsList(prop.type.value)
                    : createPropNames(prop.type.name)}
                </Box>
              </TableCell>
              {prop.required ? (
                <TableCell style={{ color: "rgb(255, 76, 34)" }}>
                  required
                </TableCell>
              ) : (
                <TableCell style={{ color: "#c6c6c6" }}>optional</TableCell>
              )}
              {prop.defaultValue ? (
                <TableCell style={{ color: "rgb(236, 171, 32)" }}>
                  {prop.defaultValue.value}
                </TableCell>
              ) : (
                <TableCell style={{ color: "#c6c6c6" }}>none</TableCell>
              )}
              {prop.docblock ? (
                <TableCell>{prop.docblock}</TableCell>
              ) : (
                <TableCell />
              )}
            </TableRow>
          )
        })}
      </TableBody>
    </Table>
  )
}

PropsTable.propTypes = {
  props: PropTypes.shape({
    id: PropTypes.string,
    displayName: PropTypes.string,
    docblock: PropTypes.string,
    childrenComponentProp: PropTypes.shape({
      name: PropTypes.string,
      docblock: PropTypes.string,
      required: PropTypes.bool,
      type: PropTypes.shape({
        name: PropTypes.string,
        value: PropTypes.string,
      }),
      defaultValue: PropTypes.shape({
        value: PropTypes.string,
      }),
    }),
  }),
}
PropsTable.defaultProps = {
  props: {
    id: "",
    displayName: "",
    docblock: "",
    childrenComponentProp: {
      name: "",
      docblock: "",
      required: false,
      type: {
        name: "",
        value: "",
      },
      defaultValue: {
        value: "",
      },
    },
  },
}

export default PropsTable
